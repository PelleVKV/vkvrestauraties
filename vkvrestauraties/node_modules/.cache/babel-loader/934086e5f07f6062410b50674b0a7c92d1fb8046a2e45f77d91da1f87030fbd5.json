{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pelle\\\\Bureaublad\\\\Projecten\\\\VKVRESTAURATIES_WEBFOLDER\\\\vkvrestauraties\\\\src\\\\ImageProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const ImageProvider = ({\n  children\n}) => {\n  _s();\n  const [projectData, setProjectData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch the data from the backend API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/folders'); // Change this URL if necessary\n        const data = await response.json();\n        const transformedData = data.folders.map(folder => {\n          var _folder$metadata, _folder$metadata2;\n          return {\n            title: ((_folder$metadata = folder.metadata) === null || _folder$metadata === void 0 ? void 0 : _folder$metadata.title) || 'banner',\n            // If title is missing, use 'Untitled'\n            desc: ((_folder$metadata2 = folder.metadata) === null || _folder$metadata2 === void 0 ? void 0 : _folder$metadata2.desc) || 'No description available',\n            // Default description if missing\n            images: folder.images,\n            // List of images\n            latlng: folder\n          };\n        });\n        setProjectData(transformedData);\n      } catch (err) {\n        setError('Failed to fetch folder data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ImageContext.Provider, {\n    value: {\n      projectData,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n// Create a custom hook to use the context\n_s(ImageProvider, \"z/zNf+qlwIUOohFseqCymHEYaMg=\");\n_c = ImageProvider;\nexport const useImageData = () => {\n  _s2();\n  return useContext(ImageContext);\n};\n_s2(useImageData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ImageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ImageContext","ImageProvider","children","_s","projectData","setProjectData","loading","setLoading","error","setError","fetchData","response","fetch","data","json","transformedData","folders","map","folder","_folder$metadata","_folder$metadata2","title","metadata","desc","images","latlng","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useImageData","_s2","$RefreshReg$"],"sources":["C:/Users/pelle/Bureaublad/Projecten/VKVRESTAURATIES_WEBFOLDER/vkvrestauraties/src/ImageProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create a context\r\nconst ImageContext = createContext();\r\n\r\n// Create a provider component\r\nexport const ImageProvider = ({ children }) => {\r\n    const [projectData, setProjectData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch the data from the backend API\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/folders'); // Change this URL if necessary\r\n                const data = await response.json();\r\n\r\n                const transformedData = data.folders.map(folder => ({\r\n                    title: folder.metadata?.title || 'banner', // If title is missing, use 'Untitled'\r\n                    desc: folder.metadata?.desc || 'No description available', // Default description if missing\r\n                    images: folder.images, // List of images\r\n                    latlng: folder\r\n                }));\r\n\r\n                setProjectData(transformedData);\r\n            } catch (err) {\r\n                setError('Failed to fetch folder data');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <ImageContext.Provider value={{ projectData, loading, error }}>\r\n            {children}\r\n        </ImageContext.Provider>\r\n    );\r\n};\r\n\r\n// Create a custom hook to use the context\r\nexport const useImageData = () => {\r\n    return useContext(ImageContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACnE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,MAAMC,eAAe,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,MAAM;UAAA,IAAAC,gBAAA,EAAAC,iBAAA;UAAA,OAAK;YAChDC,KAAK,EAAE,EAAAF,gBAAA,GAAAD,MAAM,CAACI,QAAQ,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBE,KAAK,KAAI,QAAQ;YAAE;YAC3CE,IAAI,EAAE,EAAAH,iBAAA,GAAAF,MAAM,CAACI,QAAQ,cAAAF,iBAAA,uBAAfA,iBAAA,CAAiBG,IAAI,KAAI,0BAA0B;YAAE;YAC3DC,MAAM,EAAEN,MAAM,CAACM,MAAM;YAAE;YACvBC,MAAM,EAAEP;UACZ,CAAC;QAAA,CAAC,CAAC;QAEHb,cAAc,CAACU,eAAe,CAAC;MACnC,CAAC,CAAC,OAAOW,GAAG,EAAE;QACVjB,QAAQ,CAAC,6BAA6B,CAAC;MAC3C,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIX,OAAA,CAACC,YAAY,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAExB,WAAW;MAAEE,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EACzDA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;;AAED;AAAA7B,EAAA,CArCaF,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAsC1B,OAAO,MAAMiC,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,OAAOxC,UAAU,CAACK,YAAY,CAAC;AACnC,CAAC;AAACmC,GAAA,CAFWD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}