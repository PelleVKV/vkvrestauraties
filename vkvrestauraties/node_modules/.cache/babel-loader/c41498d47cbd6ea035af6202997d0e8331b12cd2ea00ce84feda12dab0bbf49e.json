{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// Create a context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ImageContext=/*#__PURE__*/createContext();// Create a provider component\nexport const ImageProvider=_ref=>{let{children}=_ref;const[projectData,setProjectData]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Fetch the data from the backend API\nuseEffect(()=>{const fetchData=async()=>{try{const response=await fetch('http://localhost:3000/api/folders');// Change this URL if necessary\nconst data=await response.json();const transformedData=data.folders.map(folder=>{var _folder$metadata,_folder$metadata2,_folder$metadata3,_folder$metadata4,_folder$metadata5;return{title:((_folder$metadata=folder.metadata)===null||_folder$metadata===void 0?void 0:_folder$metadata.title)||'banner',desc:((_folder$metadata2=folder.metadata)===null||_folder$metadata2===void 0?void 0:_folder$metadata2.desc)||'No description available',images:folder.images,banner:((_folder$metadata3=folder.metadata)===null||_folder$metadata3===void 0?void 0:_folder$metadata3.header_img)||'',lat:((_folder$metadata4=folder.metadata)===null||_folder$metadata4===void 0?void 0:_folder$metadata4.latlng.split(',')[0])||0,lng:((_folder$metadata5=folder.metadata)===null||_folder$metadata5===void 0?void 0:_folder$metadata5.latlng.split(',')[1])||0};});setProjectData(transformedData);}catch(err){setError('Failed to fetch folder data');}finally{setLoading(false);}};fetchData();},[]);return/*#__PURE__*/_jsx(ImageContext.Provider,{value:{projectData,loading,error},children:children});};// Create a custom hook to use the context\nexport const useImageData=()=>{return useContext(ImageContext);};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ImageContext","ImageProvider","_ref","children","projectData","setProjectData","loading","setLoading","error","setError","fetchData","response","fetch","data","json","transformedData","folders","map","folder","_folder$metadata","_folder$metadata2","_folder$metadata3","_folder$metadata4","_folder$metadata5","title","metadata","desc","images","banner","header_img","lat","latlng","split","lng","err","Provider","value","useImageData"],"sources":["C:/Users/pelle/Bureaublad/Projecten/VKVRESTAURATIES_WEBFOLDER/webfolder/vkvrestauraties/src/ImageProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create a context\r\nconst ImageContext = createContext();\r\n\r\n// Create a provider component\r\nexport const ImageProvider = ({ children }) => {\r\n    const [projectData, setProjectData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch the data from the backend API\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:3000/api/folders'); // Change this URL if necessary\r\n                const data = await response.json();\r\n\r\n                const transformedData = data.folders.map(folder => ({\r\n                    title: folder.metadata?.title || 'banner',\r\n                    desc: folder.metadata?.desc || 'No description available',\r\n                    images: folder.images,\r\n                    banner: folder.metadata?.header_img || '',\r\n                    lat: folder.metadata?.latlng.split(',')[0] || 0,\r\n                    lng: folder.metadata?.latlng.split(',')[1] || 0,\r\n                }));\r\n\r\n                setProjectData(transformedData);\r\n            } catch (err) {\r\n                setError('Failed to fetch folder data');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <ImageContext.Provider value={{ projectData, loading, error }}>\r\n            {children}\r\n        </ImageContext.Provider>\r\n    );\r\n};\r\n\r\n// Create a custom hook to use the context\r\nexport const useImageData = () => {\r\n    return useContext(ImageContext);\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC;AACA,MAAO,MAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAExC;AACAC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAa,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAC,CAAE;AACnE,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElC,KAAM,CAAAC,eAAe,CAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,MAAM,OAAAC,gBAAA,CAAAC,iBAAA,CAAAC,iBAAA,CAAAC,iBAAA,CAAAC,iBAAA,OAAK,CAChDC,KAAK,CAAE,EAAAL,gBAAA,CAAAD,MAAM,CAACO,QAAQ,UAAAN,gBAAA,iBAAfA,gBAAA,CAAiBK,KAAK,GAAI,QAAQ,CACzCE,IAAI,CAAE,EAAAN,iBAAA,CAAAF,MAAM,CAACO,QAAQ,UAAAL,iBAAA,iBAAfA,iBAAA,CAAiBM,IAAI,GAAI,0BAA0B,CACzDC,MAAM,CAAET,MAAM,CAACS,MAAM,CACrBC,MAAM,CAAE,EAAAP,iBAAA,CAAAH,MAAM,CAACO,QAAQ,UAAAJ,iBAAA,iBAAfA,iBAAA,CAAiBQ,UAAU,GAAI,EAAE,CACzCC,GAAG,CAAE,EAAAR,iBAAA,CAAAJ,MAAM,CAACO,QAAQ,UAAAH,iBAAA,iBAAfA,iBAAA,CAAiBS,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAI,CAAC,CAC/CC,GAAG,CAAE,EAAAV,iBAAA,CAAAL,MAAM,CAACO,QAAQ,UAAAF,iBAAA,iBAAfA,iBAAA,CAAiBQ,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAI,CAClD,CAAC,EAAC,CAAC,CAEH3B,cAAc,CAACU,eAAe,CAAC,CACnC,CAAE,MAAOmB,GAAG,CAAE,CACVzB,QAAQ,CAAC,6BAA6B,CAAC,CAC3C,CAAC,OAAS,CACNF,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAEDG,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,mBACIX,IAAA,CAACC,YAAY,CAACmC,QAAQ,EAACC,KAAK,CAAE,CAAEhC,WAAW,CAAEE,OAAO,CAAEE,KAAM,CAAE,CAAAL,QAAA,CACzDA,QAAQ,CACU,CAAC,CAEhC,CAAC,CAED;AACA,MAAO,MAAM,CAAAkC,YAAY,CAAGA,CAAA,GAAM,CAC9B,MAAO,CAAA1C,UAAU,CAACK,YAAY,CAAC,CACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}